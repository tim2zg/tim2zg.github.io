[ { "title": "Why suicide is not an option!", "url": "/posts/why-suicide-is-not-an-option/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, suicide, depression", "date": "2022-06-28 00:00:00 +0200", "snippet": "Why suicide is not an option!Let’s speak facts, suicide is becoming a bigger and bigger problem in the developed world. And suicide is one of the highest causes of death among teenagers. It’s a topic no one wants to speak about. Clear numbers and statistics are hard to get and the ones for the current years aren’t even out yet. The corona pandemic has worsened a lot. Psychiatry got overflowed with teenagers who lost their contact with friends and so also their only hope.But why would I cover this here, on a developer blog? Well, there are a few reasons. First, I can write over the stuff I want, second, it’s a big problem inside the developer world and third, we influence it. So let me explain:Depressions and anxiety are surprisingly common in the tech world and the MINT scene. One example is imposter syndrome. It’s easy to ignore compliments and this sort of stuff. Because you see others around you who are a thousand times better than you. And after a while, you become anxious because you think that the people around you might have too high hopes. I personally often find myself in such a situation. I once landed in a few newspapers because I reported a bypass of well-known software and somehow the story got to the media. For me, it was a “hard” time.But why would you write over your problems? Wouldn’t that make you more vulnerable? Yes, at the beginning it makes you more vulnerable, but if you want to face your fears and tell others about them, it makes you stronger! It’s like open-source code, if you have your problems open others can learn from them and they can help you solve them better. And well smooth like this we reached the in my opinion worst point. A big reason for the high depression rate is that the secure key points broke, for example, good connections to friends and deep talks with them over all sorts of problems. From my “experience”, teens who self-harm themselves are often afraid to contact older people because they react completely unprepared. And unfortunately, I have to say yes. They often get left alone because no one knows and cares what to do. In this case from my experience, they often need someone to talk with. But make sure to not go too far! Don’t dig too deep! And make sure to tell them about your problems. Because they must see that they are not alone. Then you should tell them to get in touch with a professional therapist. There are nowadays good, free and anonym offerings! A big problem is Instagram, Snapchat and TikTok! They have an enormous impact on the feelings of teenagers. On these platforms, you see the filtered reality. And only the best parts. It’s completely not in balance! Often posts which cover such topics as depression get shadow band because you don’t want to cover such topics. And this “security” mechanism completely misses its intended purpose. It just drives the teenager’s depression. But the biggest problem is: It’s lucrative that way. Therefore, we need communities on Discord, Reddit and occasionally 4Chan, where you can anonymously post your stories and find other which have the same problems as you have.All in all, it’s a bit sad that every 11 minutes someone dies because of suicide. I hope in the future everyone can talk about their problems regardless of their gender, social status, or their age. And why is it so strange (at least where I am) when boys hug each other especially when girls do it all the time? In my opinion, hugs are the depression killer number one regardless of gender. I sometimes have so many questions about this society.If you are still here, thank you. If you are in a dark mood today, just know you are not alone. And a lot of the time music can help. Here are some recommendations:Mix playlist: PlaylistSome good artists: JoshA / Lil Revive, iamjakehill, AK, NEFFEX, MASN, convolk, jxdnStay strong, you are amazing!Sources:Google TrendsTagesschauUnicefGmxAdminAdminAdmin" }, { "title": "Flutter Charts with InfluxDB", "url": "/posts/influxdb/", "categories": "serverStuff", "tags": "influxdb, tim2zg, howto, setup, time-series, database, SmartHome", "date": "2022-06-26 00:00:00 +0200", "snippet": "InfluxDBWhat is influx?Simplified: a time-series database. You send a few values over time and influx takes care of it. It’s extremely useful to store sensor measurement data from as example: a smart home instance.Different influx versions:There are versions before 1.8 after (well no shit sherlock) in the version before you can’t use the FLUX query language. And after the version, the databases are called buckets and some stuff got a bit confusing. And after all, for a small home lab setup, it’s enough and behind a firewall, it should also be secure. I personally prefer influx 1.8 over the other versions because of the simple set-up.Install on Ubuntu:Documentation and Source wget -q https://repos.influxdata.com/influxdb.key echo '23a1c8836f0afc5ed24e0486339d7cc8f6790b83886c4c96995b88a061c5bb5d influxdb.key' | sha256sum -c &amp;&amp; cat influxdb.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdb.gpg &gt; /dev/null echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdb.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list sudo apt-get update &amp;&amp; sudo apt-get install influxdb sudo service influxdb start sudo service influxdb status sudo systemctl enable influxdb Configuration:Documentation and SourceFirst type influx as a command, then a shell should launch.Then to create an admin user typeCREATE USER admin WITH PASSWORD 'yourPassword' WITH ALL PRIVILEGESTo create a DB: CREATE DATABASE DBNAMETo delete a DB: DROP DATABASE DBNAMEYou can exit the shell with quitThere are a few settings to play within the config file which is located at: /etc/influxdb/influxdb.confAs an example: under [http], flux-enabled = false uncomment (remove the # in front) and set it to true and then you can send flux queries to the API endpoint. Or also under [http], auth-enabled = false for authentication. Or enable UDP endpoint under [[udp]].A tutorial on how to use Grafana in combination with influx will follow.Stay amazing.API Query:Documentation and SourceIn flux curl -XPOST http://localhost:8086/api/v2/query -sS \\-H 'Accept:application/csv' \\-H 'Content-type:application/vnd.flux' \\-d 'from(bucket:\"_internal\") \\|&gt; range(start:-5m) \\|&gt; filter(fn:(r) =&gt; r._measurement == \"runtime\")' returns from the DB “_internal” the “runtime” measurements from the last 5 minutes.In InfluxQL curl -i -XPOST http://localhost:8086/query --user user:password --data-urlencode \"q=SHOW DATABASES\"" }, { "title": "Quick Notes", "url": "/posts/plan/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, QuickNotes, plans", "date": "2022-05-24 00:00:00 +0200", "snippet": "Quick Notes:26.06.2022:Influx Post in work and maybe something more.18.05.2022:I learned the whole day for school. Same Story other day. And I got interested in UE 5.18.05.2022:I learned the whole day for school. Sorry16.05.2022:Sorry, now I learn over Tensorflow :/15.05.2022:Unfortunately, I couldn’t write posts over the weekend and probably can’t write next week. Because of school and some other stuff, I should be back in a week." }, { "title": "The two types of progress", "url": "/posts/the-two-types-of-progress/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, progress, planing", "date": "2022-05-15 00:00:00 +0200", "snippet": "The two types of progress.I think there are two types of progress. The invisible and the visible. The invisible is the one where you spent hours and hours on it to understand a topic, but don’t get it. And the visible one is if you finish a milestone in one of your projects. So, some examples: I have some unknown smart home thingis at home and you wanted to control them with my own software. I tried for over a year and it wouldn’t work. But in this time that you waste you get a much deeper understanding of the things you are working with. And at some point, it just works. I think it’s really important to mix and match projects. That you have the good and the bad moments as well. And in the end, it should balance. For example, I don’t have an idea about machine learning, but I want to learn it. And yes, it’s frustrating to start (at least for me). Because I could use the time on other projects, and I would be so much faster. So, I currently must switch from machine learning to some other project and back again.Well, I hope it helped you or something. Have a good evening." }, { "title": "The location pain in flutter.", "url": "/posts/location-pain-flutter/", "categories": "programming", "tags": "flutter, tim2zg, dart, location, geolocator", "date": "2022-05-13 00:00:00 +0200", "snippet": "The location pain in flutter.So, a friend and I try to get the user’s location in flutter, and in total, we wasted a lot of time (approx. 4h). And yes, we just could be completely lost, at this point I just don’t care anymore…So here is the code:Dependencies:geolocator: ^8.2.1Don’t forget to add&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;&lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;to the AndroidManifest.xml!Future&lt;bool&gt; request_permissions() async { LocationPermission permission; permission = await Geolocator.requestPermission(); if (permission == LocationPermission.denied) { return false; // Alert with Popup! } else if (permission == LocationPermission.deniedForever) { return false; // Alert with Popup! } else { return true; } } Future&lt;bool&gt; get_location_perms() async { bool serviceenabled; LocationPermission permission; serviceenabled = await Geolocator.isLocationServiceEnabled(); if (!serviceenabled) { // Alert with Popup print(\"Service not enabled!\"); return false; } permission = await Geolocator.checkPermission(); if (permission == LocationPermission.whileInUse) { return true; } else if (permission == LocationPermission.always) { return true; } else { return request_permissions(); } } Future&lt;Position?&gt; get_position() async { if (await get_location_perms() == true) { Geolocator.getCurrentPosition(forceAndroidLocationManager: true, timeLimit: const Duration(seconds: 10)); print(await Geolocator.getCurrentPosition()); // Web print(await Geolocator.getLastKnownPosition(forceAndroidLocationManager: true)); // Android return await Geolocator.getCurrentPosition(); } }“It ShOuLd bE sElF-eXpLaNaToRy”To get a position we first call the get permission function.If we have, we return true. If not we try to get the permission from the user with the request permission function. If he refuses, we return a false and print an error message.Here is a full sample:import 'package:flutter/material.dart';import 'package:geolocator/geolocator.dart';void main() { runApp(const MyApp());}class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', theme: ThemeData( // This is the theme of your application. // // Try running your application with \"flutter run\". You'll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\", // or simply save your changes to \"hot reload\" in a Flutter IDE). // Notice that the counter didn't reset back to zero; the application // is not restarted. primarySwatch: Colors.blue, ), home: const MyHomePage(title: 'Flutter Demo Home Page'), ); }}class MyHomePage extends StatefulWidget { const MyHomePage({Key? key, required this.title}) : super(key: key); // This widget is the home page of your application. It is stateful, meaning // that it has a State object (defined below) that contains fields that affect // how it looks. // This class is the configuration for the state. It holds the values (in this // case the title) provided by the parent (in this case the App widget) and // used by the build method of the State. Fields in a Widget subclass are // always marked \"final\". final String title; @override State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();}class _MyHomePageState extends State&lt;MyHomePage&gt; { Future&lt;bool&gt; request_permissions() async { LocationPermission permission; permission = await Geolocator.requestPermission(); if (permission == LocationPermission.denied) { return false; // Alert with Popup! } else if (permission == LocationPermission.deniedForever) { return false; // Alert with Popup! } else { return true; } } Future&lt;bool&gt; get_location_perms() async { bool serviceenabled; LocationPermission permission; serviceenabled = await Geolocator.isLocationServiceEnabled(); if (!serviceenabled) { // Alert with Popup print(\"Service not enabled!\"); return false; } permission = await Geolocator.checkPermission(); if (permission == LocationPermission.whileInUse) { return true; } else if (permission == LocationPermission.always) { return true; } else { return request_permissions(); } } Future&lt;Position?&gt; get_position() async { if (await get_location_perms() == true) { Geolocator.getCurrentPosition(forceAndroidLocationManager: true, timeLimit: const Duration(seconds: 10)); print(await Geolocator.getCurrentPosition()); // Web print(await Geolocator.getLastKnownPosition(forceAndroidLocationManager: true)); // Android return await Geolocator.getCurrentPosition(); } } @override Widget build(BuildContext context) { // This method is rerun every time setState is called, for instance as done // by the _incrementCounter method above. // // The Flutter framework has been optimized to make rerunning build methods // fast, so that you can just rebuild anything that needs updating rather // than having to individually change instances of widgets. return Scaffold( appBar: AppBar( // Here we take the value from the MyHomePage object that was created by // the App.build method, and use it to set our appbar title. title: Text(widget.title), ), body: Center( // Center is a layout widget. It takes a single child and positions it // in the middle of the parent. child: Column( // Column is also a layout widget. It takes a list of children and // arranges them vertically. By default, it sizes itself to fit its // children horizontally, and tries to be as tall as its parent. // // Invoke \"debug painting\" (press \"p\" in the console, choose the // \"Toggle Debug Paint\" action from the Flutter Inspector in Android // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code) // to see the wireframe for each widget. // // Column has various properties to control how it sizes itself and // how it positions its children. Here we use mainAxisAlignment to // center the children vertically; the main axis here is the vertical // axis because Columns are vertical (the cross axis would be // horizontal). mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ const Text( 'You have pushed the button this many times:', ), Text( '', style: Theme.of(context).textTheme.headline4, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: get_position, tooltip: 'Increment', child: const Icon(Icons.add), ), // This trailing comma makes auto-formatting nicer for build methods. ); }}You can find the whole code in this repo.Yeah I really have to improve the example repo!" }, { "title": "Plans?", "url": "/posts/plans/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, future, plans", "date": "2022-05-10 00:00:00 +0200", "snippet": "I wrote a hand full post now. And as of now, I’m happy with them. I have a lot of stories and thoughts to tell and a few topics that I can teach you all. Here are a few topics I want to cover: Flutter, more Python, add documentation for the Projects I’ve done… Linux, Server, Virtualisation, Firewall, and so on… Depression and how some of the common mental health issues in this community… A bit of reverse engineering And lots more :)I hope you have a wonderful day. And just remember you are an amazing human being." }, { "title": "Nothing is true", "url": "/posts/nothing-is-true/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, brainf0ck, theories, trueorfalse", "date": "2022-05-09 00:00:00 +0200", "snippet": "Ok, we never can say something is 100% true. Our mind is a network that contains points that are connected. If two points are stronger connected, we remember something clearer. And vice versa. If its sounds like an AI or a Neuronal Network it’s because it is, just a few billion times faster and more complex and it’s built on biochemical reactions instead of silicon.The Problem: These things just give us a more likely or a less likely not a true or false. You can notice this if you get older -&gt; you forget some things and aren’t quite sure if something really happened.Now I say: we can’t prove that something happened without Objects: Because of the rules I mentioned above, we can’t be sure something happened. Unless other people say that too.But what if we experienced all the same thing, our brains remember the same thing but there was no such thing? It could be possible that our brain saved the memory wrong, but because all our brains work the same way we still all remember “correctly”.Well, it’s pretty brain f0ck. But if you ask yourself such questions you end up at such a point.Let’s take it a step further, let us assume our world is infinite, could another human-like species produce the same World we live in today? Or do they “interpret” the things around them in another way. And even interpreter key things like thinking in another way? Well, we don’t know.Let’s assume that all of it was a programming function, and we could change the “interpretation factor” as a parameter. Then generate infinite Worlds with infinite different parameters. Then we would have a one-dimensional infinite world generation.Now I don’t know how I came to this point and how to close it off.I think the many-worlds theory would be an explanation that would work in this case. There would be a starting point where all World would be generated with all infinite parameters with infinite values. But this would mean does this happen at the start or is it a continuous process? I think this is one of the smaller problems. To sum up we would live in a Matrix-like world with something other somewhere that has all infinite clones.These are all theories, nothing is proven. I write this to give another perspective on the things we consider normal." }, { "title": "Flutter Charts with InfluxDB", "url": "/posts/flutter-charts/", "categories": "programming", "tags": "flutter, tim2zg, dart, influx, influxdb, charts", "date": "2022-05-09 00:00:00 +0200", "snippet": "Flutter Charts tutorial with Influx as a data source.What do we need:Influx DB Version 1. XFirst, we add the dependencies:charts_flutter: ^0.12.0influxdb_client: ^2.2.0Because if we query data from the DB, it should happen asynchronous (at the same time in the background). We need to build the Charts with a Future builder.import 'package:charts_flutter/flutter.dart' as charts;import 'package:flutter/material.dart';class datachart extends StatefulWidget { @override State&lt;StatefulWidget&gt; createState() { return datachartwidget(); // Calling the Chart widget }}class datachartwidget extends State&lt;datachart&gt; { // Our Chart widget @override Widget build(BuildContext context) { return FutureBuilder( future: // Function that gets the Data builder: (BuildContext context, AsyncSnapshot snapshot) { if (snapshot.connectionState == ConnectionState.done) { // See if the data is there return charts.TimeSeriesChart( // If data is there we return the chart snapshot.data, animate: true, customSeriesRenderers: [ charts.SymbolAnnotationRendererConfig( customRendererId: 'customSymbolAnnotation') ], dateTimeFactory: const charts.LocalDateTimeFactory(), ); } else { return const Center(child: CircularProgressIndicator());// Else we return a Progressbar } } ); }}We made a constructor which will return a time chart as soon as the function returns the data. But we first must make such a function that queries the data from the DB.import 'package:influxdb_client/api.dart';import 'package:charts_flutter/flutter.dart' as charts;Future&lt;List&lt;charts.Series&lt;dynamic, DateTime&gt;&gt;&gt; getdata(String duration, String timespann) async { var thedata = []; InfluxDBClient client = InfluxDBClient( url: '', // Your URL for Example: http://127.0.0.1:8086 username: '', // Your Username of the DB for Example: admin password: '', // Your Password of the DB for Example: 123 debug: false); var queryService = client.getQueryService(); var query = await queryService.query('''from(bucket: \"iobroker\") |&gt; range(start: -${duration}) |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"0_userdata.0.SolarDaten.Eigenverbrauch_%\") |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"value\") |&gt; aggregateWindow(every: ${timespann}, fn: mean, createEmpty: false) |&gt; yield(name: \"mean\")'''); await query.forEach((element) { thedata.add(data(DateTime.parse(element['_time']), element['_value']));}); client.close(); return [charts.Series&lt;dynamic, DateTime&gt;( id: 'Eigenverbauch %', colorFn: (_, __) =&gt; charts.MaterialPalette.blue.shadeDefault, domainFn: (data, _) =&gt; data.time, measureFn: (data, _) =&gt; data.value, data: thedata, ), ];}class data { final DateTime time; final double value; data(this.time, this.value);}So we made a function that returns charts.Series. First, we need to create a Database Client, it takes a Username, a Password, and the Host. Then we write a query in the flux language. You can use the example provided, but make sure you query the Data from the right Database (just replace ioBroker with the name of the Database) and the right value (just replace the 0_userdata.0.SolarDaten.Eigenverbrauch_% with your time series). At the start, we define a data class that allows us to map the time value to a double value for our time series chart. Then we take the incoming data and map it to our data class, which gets added to the thedata variable. We close the client. And return a list with our one-time series chart that gets our data.I would write the getdata function in another file and import it:charts.dart:import 'package:charts_flutter/flutter.dart' as charts;import 'package:flutter/material.dart';import 'getdata.dart';class datachart extends StatefulWidget { @override State&lt;StatefulWidget&gt; createState() { return datachartwidget(); // Calling the Chart widget }}class datachartwidget extends State&lt;datachart&gt; { // Our Chart widget @override Widget build(BuildContext context) { return FutureBuilder( future: getdata(\"1d\", \"1m\"), // Function that gets the Data builder: (BuildContext context, AsyncSnapshot snapshot) { if (snapshot.connectionState == ConnectionState.done) { // See if the data is there return charts.TimeSeriesChart( // If data is there we return the chart snapshot.data, animate: true, customSeriesRenderers: [ charts.SymbolAnnotationRendererConfig( customRendererId: 'customSymbolAnnotation') ], dateTimeFactory: const charts.LocalDateTimeFactory(), ); } else { return const Center(child: CircularProgressIndicator());// Else we return a Progressbar } } ); }}getdata.dart:import 'package:influxdb_client/api.dart';import 'package:charts_flutter/flutter.dart' as charts;Future&lt;List&lt;charts.Series&lt;dynamic, DateTime&gt;&gt;&gt; getdata(String duration, String timespann) async { var thedata = []; InfluxDBClient client = InfluxDBClient( url: '', // Your URL for Example: http://127.0.0.1:8086 username: '', // Your Username of the DB for Example: admin password: '', // Your Password of the DB for Example: 123 debug: false); var queryService = client.getQueryService(); var query = await queryService.query('''from(bucket: \"iobroker\") |&gt; range(start: -${duration}) |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"0_userdata.0.SolarDaten.Eigenverbrauch_%\") |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"value\") |&gt; aggregateWindow(every: ${timespann}, fn: mean, createEmpty: false) |&gt; yield(name: \"mean\")'''); await query.forEach((element) { thedata.add(data(DateTime.parse(element['_time']), element['_value']));}); client.close(); return [charts.Series&lt;dynamic, DateTime&gt;( id: 'Eigenverbauch %', colorFn: (_, __) =&gt; charts.MaterialPalette.blue.shadeDefault, domainFn: (data, _) =&gt; data.time, measureFn: (data, _) =&gt; data.value, data: thedata, ), ];}class data { final DateTime time; final double value; data(this.time, this.value);}This requires importing the other file into the charts.dart as seen at the top. Additionally, you must add the time span and the frequency. For Example, all the data from a day and a value per Minute. With these parameters, you can control the bandwidth and the stress of your database.These code snippets are modified samples from: HereI additionally uploaded the files: Here" }, { "title": "Why cheating is bad.", "url": "/posts/cheating/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, cheating", "date": "2022-05-08 00:00:00 +0200", "snippet": "I’m addicted to YouTube. And it’s not necessarily a bad thing, because I get about 90% of my Information from YouTube.Last month I stumbled upon a video that got recommended to me. It was about a college professor arguing about cheating. And I found it interesting because what you essentially do with cheating is cut a few corners to raise your overall score. And I think there is nothing wrong whit cheating at this point. Because the only thing you’ve done is optimize the work. The problem is at another point. Your performance score is too high. And people are ranking your work and performance with your score. Essentially you get overwhelmed with work and you must again cut some corners. But if you cut corners the quality of your work goes down. And eventually, if you do it again and again you cut the wrong corners…So, you can choose: Do you want to cheat and “fake it till you make it” or do you want to be fair and get ranked lower but deliver good and consistent work without cutting corners.At the end of the day, you must choose for yourself.There are always ways to cheat, and I think it’s extremely easy to cheat in classes at least there where I am." }, { "title": "The first post on my blog", "url": "/posts/fist-post/", "categories": "My-thoughts", "tags": "My-thoughts, tim2zg, start", "date": "2022-05-07 00:00:00 +0200", "snippet": "This is my first blog post.Why did I create a blog? There are a few reasons: I want to learn how GitHub Pages work. I want to improve my English writing. I want to share the little experiences that I got from my Projects with you all. And the last point, I want to write my opinion about a few topics.I mainly want to write about questions I had during programming which took me a long time to figure out. For example, I coded a Flutter application that can display a chart generated from an Influx DB on my server. And it took me a few days to figure out how it works because I had to learn the new flux language to query data from the database.I hope I can find the time to actively contribute to this blog and improve my English on the way." } ]
